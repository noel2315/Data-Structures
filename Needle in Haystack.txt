20.Given two strings needle and haystack, return the index of the first occurrence 
of needle in haystack, or -1 if needle is not part of haystack.
Example 1:
Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.


ans:
#include <stdio.h>
#include <string.h>


void computeLPSArray(char* pattern, int M, int* lps) {
    int length = 0;
    lps[0] = 0;
    int i = 1;
    while (i < M) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length!= 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}


int strStr(char* haystack, char* needle) {
    int M = strlen(needle);
    int N = strlen(haystack);
    int lps[M];
    computeLPSArray(needle, M, lps);
    int i = 0, j = 0;
    while (i < N) {
        if (haystack[i] == needle[j]) {
            i++;
            j++;
        }
        if (j == M) {
            return i - M;
        } else if (i < N && haystack[i]!= needle[j]) {
            if (j!= 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
    return -1;
}


int main() {
    char haystack[] = "sadbutsad";
    char needle[] = "sad";
    printf("Index: %d\n", strStr(haystack, needle));


    char haystack2[] = "leetcode";
    char needle2[] = "leeto";
    printf("Index: %d\n", strStr(haystack2, needle2));


    return 0;
}