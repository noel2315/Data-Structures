25.Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
Implement the MinStack class:
1. MinStack() initializes the stack object.
2. void push(int val) pushes the element val onto the stack.
3. void pop() removes the element on the top of the stack.
4. int top() gets the top element of the stack.
5. int getMin() retrieves the minimum element in the stack.
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]
Output
[null,null,null,null,-3,null,0,-2]
Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2


ANS:
#include <stdio.h>
#include <stdlib.h>


typedef struct Stack {
    int *arr;
    int top;
    int capacity;
} Stack;


Stack *createStack(int capacity) {
    Stack *stack = (Stack *)malloc(sizeof(Stack));
    stack->arr = (int *)malloc(sizeof(int) * capacity);
    stack->top = -1;
    stack->capacity = capacity;
    return stack;
}


void push(Stack *stack, int val) {
    if (stack->top == stack->capacity - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack->arr[++stack->top] = val;
}


int pop(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack->arr[stack->top--];
}


int top(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack is empty\n");
        return -1;
    }
    return stack->arr[stack->top];
}


typedef struct MinStack {
    Stack *stack;
    Stack *minStack;
} MinStack;


MinStack *minStackCreate() {
    MinStack *minStack = (MinStack *)malloc(sizeof(MinStack));
    minStack->stack = createStack(100);
    minStack->minStack = createStack(100);
    return minStack;
}


void minStackPush(MinStack *minStack, int val) {
    push(minStack->stack, val);
    if (minStack->minStack->top == -1 || val <= top(minStack->minStack)) {
        push(minStack->minStack, val);
    }
}


void minStackPop(MinStack *minStack) {
    if (top(minStack->stack) == top(minStack->minStack)) {
        pop(minStack->minStack);
    }
    pop(minStack->stack);
}


int minStackTop(MinStack *minStack) {
    return top(minStack->stack);
}


int minStackGetMin(MinStack *minStack) {
    return top(minStack->minStack);
}


int main() {
    MinStack *minStack = minStackCreate();
    minStackPush(minStack, -2);
    minStackPush(minStack, 0);
    minStackPush(minStack, -3);
    printf("Get min: %d\n", minStackGetMin(minStack)); 
    minStackPop(minStack);
    printf("Top: %d\n", minStackTop(minStack));
    printf("Get min: %d\n", minStackGetMin(minStack)); 
    return 0;
}