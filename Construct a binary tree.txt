12.Given two integer arrays preorder and inorder where preorder is the preorder 
traversal of a binary tree and inorder is the inorder traversal of the same tree, 
construct and return the binary tree.
123
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
ans:
#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;


Node* newNode(int data) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}


int search(int arr[], int strt, int end, int value) {
    int i;
    for (i = strt; i <= end; i++) {
        if (arr[i] == value)
            return i;
    }
    return -1;
}


Node* buildTree(int preorder[], int inorder[], int inStrt, int inEnd) {
    static int preIndex = 0;
    if (inStrt > inEnd)
        return NULL;
    Node* tNode = newNode(preorder[preIndex++]);
    if (inStrt == inEnd)
        return tNode;
    int inIndex = search(inorder, inStrt, inEnd, tNode->data);
    tNode->left = buildTree(preorder, inorder, inStrt, inIndex - 1);
    tNode->right = buildTree(preorder, inorder, inIndex + 1, inEnd);
    return tNode;
}


void printInorder(Node* node) {
    if (node == NULL)
        return;
    printInorder(node->left);
    printf("%d ", node->data);
    printInorder(node->right);
}


int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int len = sizeof(preorder) / sizeof(preorder[0]);
    Node* root = buildTree(preorder, inorder, 0, len - 1);
    printf("Inorder traversal of constructed tree is: ");
    printInorder(root);
    printf("\n");
    return 0;
}